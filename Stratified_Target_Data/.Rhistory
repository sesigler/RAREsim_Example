# dir_leg = 'C:/Users/sagee/OneDrive/Documents/HendricksLab/mastersProject/AFR_NFE_pops/cc10K/100v99/'
dir_in = 'C:/Users/sagee/OneDrive/Documents/HendricksLab/mastersProject/input/'
prox_p = c()
proxEcounts <- data.frame(matrix(ncol = 11, nrow = 100))
colnames(proxEcounts) <- c('Case-Fun (O)', 'Case-Syn (O)', 'Control-Fun (O)', 'Control-Syn (O)',
'Control-Fun (E)', 'Control-Syn (E)', 'Control-Fun (O-E)',
'Control-Syn (O-E)', 'Ratio-Case', 'Ratio-Control', 'P-Value')
set.seed(1)
i=1
# read in the legend file
leg = read_leg(dir_leg, Pop1, Pop2, i)
leg_fun = leg %>% filter(fun=="fun")
leg_syn = leg %>% filter(fun=="syn")
# read in the haplotype and reference files
hap_cases = read_hap(dir_in, Pop1, Pop2, i, scen, "cases", p_case_fun, p_case_syn)
hap_int = read_hap(dir_in, Pop1, Pop2, i, scen, "internal.controls", p_int_fun, p_int_syn)
hap_cc = read_hap(dir_in, Pop1, Pop2, i, scen, "common.controls", p_cc_fun, p_cc_syn)
# convert the haplotypes into genotypes
geno_cases = make_geno(hap_cases)
geno_int = make_geno(hap_int)
geno_cc = make_geno(hap_cc)
# calculate the allele counts/frequencies
count_cases = calc_allele_freqs(geno_cases, Ncase)
count_int = calc_allele_freqs(geno_int, Nint)
count_cc = calc_allele_freqs(geno_cc, Ncc)
### Run proxECAT and extract p-value
# prox = prox_data_prep(leg_fun, leg_syn, count_cases, count_cc, maf)
counts.prox = c()
case.fun = rare_counts(count_cases, leg_fun, leg_syn, maf)
counts.prox = c(counts.prox, c(case.fun[1], case.fun[2]))
ctrl.fun = rare_counts(count_cc, leg_fun, leg_syn, maf)
counts.prox = c(counts.prox, c(ctrl.fun[1], ctrl.fun[2]))
proxEcounts[i, 1:4] <- counts.prox # store counts
View(proxEcounts)
proxEcounts[i, 'Ratio-Case'] <- proxEcounts[i, 1]/proxEcounts[i, 2] # calc case ratios
proxEcounts[i, 'Ratio-Control'] <- proxEcounts[i, 3]/proxEcounts[i, 4] # calc ctrl ratios
691/468
1333/845
proxEcounts[i, 'Control-Fun (E)'] <- proxEcounts[i, 'Case-Fun (O)']*2*(ext_prune/100) # calc E ctrl-fun
proxEcounts[i, 'Control-Syn (E)'] <- proxEcounts[i, 'Case-Syn (O)']*2*(ext_prune/100) # calc E ctrl-syn
691*2*.99
468*2*.99
proxEcounts[i, 'Control-Fun (O-E)'] <- proxEcounts[i, 'Control-Fun (O)']-proxEcounts[i, 'Control-Fun (E)'] # calc O-E ctrl-fun
proxEcounts[i, 'Controls-Syn (O-E)'] <- proxEcounts[i, 'Control-Syn (O)']-proxEcounts[i, 'Control-Syn (E)'] # calc O-E ctrl-syn
proxEcounts[i, 'Control-Syn (O-E)'] <- proxEcounts[i, 'Control-Syn (O)']-proxEcounts[i, 'Control-Syn (E)'] # calc O-E ctrl-syn
1333-1368.18
845-926.64
# Run proxECAT
prox = proxecat(counts.prox[1], counts.prox[2], counts.prox[3], counts.prox[4])
# store proxECAT p-values
proxEcounts[i, 'P-Value'] <- prox$p.value
prox_p = c(prox_p, prox$p.value)
i=7
# read in the legend file
leg = read_leg(dir_leg, Pop1, Pop2, i)
leg_fun = leg %>% filter(fun=="fun")
leg_syn = leg %>% filter(fun=="syn")
# read in the haplotype and reference files
hap_cases = read_hap(dir_in, Pop1, Pop2, i, scen, "cases", p_case_fun, p_case_syn)
hap_int = read_hap(dir_in, Pop1, Pop2, i, scen, "internal.controls", p_int_fun, p_int_syn)
hap_cc = read_hap(dir_in, Pop1, Pop2, i, scen, "common.controls", p_cc_fun, p_cc_syn)
# convert the haplotypes into genotypes
geno_cases = make_geno(hap_cases)
geno_int = make_geno(hap_int)
geno_cc = make_geno(hap_cc)
# calculate the allele counts/frequencies
count_cases = calc_allele_freqs(geno_cases, Ncase)
count_int = calc_allele_freqs(geno_int, Nint)
count_cc = calc_allele_freqs(geno_cc, Ncc)
### Run proxECAT and extract p-value
# prox = prox_data_prep(leg_fun, leg_syn, count_cases, count_cc, maf)
counts.prox = c()
case.fun = rare_counts(count_cases, leg_fun, leg_syn, maf)
counts.prox = c(counts.prox, c(case.fun[1], case.fun[2]))
ctrl.fun = rare_counts(count_cc, leg_fun, leg_syn, maf)
counts.prox = c(counts.prox, c(ctrl.fun[1], ctrl.fun[2]))
proxEcounts[i, 1:4] <- counts.prox # store counts
proxEcounts[i, 'Ratio-Case'] <- proxEcounts[i, 1]/proxEcounts[i, 2] # calc case ratios
proxEcounts[i, 'Ratio-Control'] <- proxEcounts[i, 3]/proxEcounts[i, 4] # calc ctrl ratios
proxEcounts[i, 'Control-Fun (E)'] <- proxEcounts[i, 'Case-Fun (O)']*2*(ext_prune/100) # calc E ctrl-fun
proxEcounts[i, 'Control-Syn (E)'] <- proxEcounts[i, 'Case-Syn (O)']*2*(ext_prune/100) # calc E ctrl-syn
proxEcounts[i, 'Control-Fun (O-E)'] <- proxEcounts[i, 'Control-Fun (O)']-proxEcounts[i, 'Control-Fun (E)'] # calc O-E ctrl-fun
proxEcounts[i, 'Control-Syn (O-E)'] <- proxEcounts[i, 'Control-Syn (O)']-proxEcounts[i, 'Control-Syn (E)'] # calc O-E ctrl-syn
# Run proxECAT
prox = proxecat(counts.prox[1], counts.prox[2], counts.prox[3], counts.prox[4])
# store proxECAT p-values
proxEcounts[i, 'P-Value'] <- prox$p.value
751/403
1404/771
751*2*.99
403*2*.99
1404-1486.98
771-797.94
prox_p = c(prox_p, prox$p.value)
proxEcounts <- proxEcounts[, 1:11]
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggpubr)
library(binom)
library(data.table)
Pop1 = 'AFR'
Pop2 = 'NFE'
scen = 's1'
maf = 0.001 #MAF: 0.001 (0.1%) or 0.01 (1%)
Ncc = 'cc10k'  #Number of common controls: 'cc5k' or 'cc10k'
int_prune = 100
ext_prune = 99
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggpubr)
library(binom)
library(data.table)
Pop1 = "AFR"
Pop2 = "NFE"
scen = "s1"
maf = 0.001 #MAF: 0.001 (0.1%) or 0.01 (1%)
int_prune = 100
ext_prune = 99
dir = 'C:/Users/sagee/OneDrive/Documents/GitHub/masters_project/'
# Read in csv file
counts = read.table(paste0(dir, 'proxECAT_counts_expanded_', int_prune, "_v_", ext_prune, '.csv'), header = T)
# Read in csv file
counts = read.table(paste0(dir, 'proxECAT_counts_expanded_', int_prune, "_v_", ext_prune, '.csv'), header = T, fill = T)
View(counts)
# Read in csv file
counts = read.table(paste0(dir, 'proxECAT_counts_expanded_', int_prune, "_v_", ext_prune, '.csv'), header = F)
# Read in csv file
counts = read.table(paste0(dir, 'proxECAT_counts_expanded_', int_prune, "_v_", ext_prune, '.csv'), header = T, sep = ',')
View(counts)
# Read in csv file
counts = read.table(paste0(dir, 'proxECAT_counts_expanded_', int_prune, "_v_", ext_prune, '.csv'), header = T, sep = ',', fileEncoding="UTF-8-BOM")
View(counts)
View(counts)
# Read in csv file
counts = read.table(paste0(dir, 'proxECAT_counts_expanded_', int_prune, "_v_", ext_prune, '.csv'), header = T, sep = ',')
View(counts)
colnames(counts) <- c('Case-Fun (O)', 'Case-Syn (O)', 'Control-Fun (O)', 'Control-Syn (O)',
'Control-Fun (E)', 'Control-Syn (E)', 'Control-Fun (O-E)',
'Control-Syn (O-E)', 'Ratio-Case', 'Ratio-Control', 'P-Value')
View(counts)
ggplot(counts) +
geom_histogram(aes(x = `Control-Fun (O)`, color = "Control-Fun (O)")) +
geom_histogram(aes(x = `Control-Fun (E)`, color = "Control-Fun (E)")) +
#geom_density(alpha=0.4) +
#scale_x_continuous(breaks = seq(0, 1, by = 0.2)) +
scale_color_manual(values=colors) +
#scale_fill_manual(values=colors) +
#facet_grid(Data~factor(Method, levels = c("iECAT-O", "ProxECAT", "LogProx", "SKAT-O")), space = "free_x", scales = "free_x") +
labs(title = "Distribution of Function Alleles (100% vs 99% Pruned)", x = "Number of Alleles", y = "Counts") +
theme_bw(base_size = 20)
colors = c("#0072B2", "#D55E00")
ggplot(counts) +
geom_histogram(aes(x = `Control-Fun (O)`, color = "Control-Fun (O)")) +
geom_histogram(aes(x = `Control-Fun (E)`, color = "Control-Fun (E)")) +
#geom_density(alpha=0.4) +
#scale_x_continuous(breaks = seq(0, 1, by = 0.2)) +
scale_color_manual(values=colors) +
#scale_fill_manual(values=colors) +
#facet_grid(Data~factor(Method, levels = c("iECAT-O", "ProxECAT", "LogProx", "SKAT-O")), space = "free_x", scales = "free_x") +
labs(title = "Distribution of Function Alleles (100% vs 99% Pruned)", x = "Number of Alleles", y = "Counts") +
theme_bw(base_size = 20)
ggplot(counts) +
geom_histogram(aes(x = `Control-Fun (O)`, color = "Control-Fun (O)"), position = "identity", alpha = 0.4, bins = 20) +
geom_histogram(aes(x = `Control-Fun (E)`, color = "Control-Fun (E)"), position = "identity", alpha = 0.4, bins = 20) +
#geom_density(alpha=0.4) +
#scale_x_continuous(breaks = seq(0, 1, by = 0.2)) +
scale_color_manual(values=colors) +
scale_fill_manual(values=colors) +
#facet_grid(Data~factor(Method, levels = c("iECAT-O", "ProxECAT", "LogProx", "SKAT-O")), space = "free_x", scales = "free_x") +
labs(title = "Distribution of Function Alleles (100% vs 99% Pruned)", x = "Number of Alleles", y = "Counts") +
theme_bw(base_size = 20)
ggplot(counts) +
geom_histogram(aes(x = `Control-Fun (O)`, color = "Control-Fun (O)"), color = "#0072B2", fill = "#0072B2", position = "identity", alpha = 0.4, bins = 20) +
geom_histogram(aes(x = `Control-Fun (E)`, color = "Control-Fun (E)"), color = "#D55E00", fill = "#D55E00", position = "identity", alpha = 0.4, bins = 20) +
#geom_density(alpha=0.4) +
#scale_x_continuous(breaks = seq(0, 1, by = 0.2)) +
# scale_color_manual(values=colors) +
# scale_fill_manual(values=colors) +
#facet_grid(Data~factor(Method, levels = c("iECAT-O", "ProxECAT", "LogProx", "SKAT-O")), space = "free_x", scales = "free_x") +
labs(title = "Distribution of Function Alleles (100% vs 99% Pruned)", x = "Number of Alleles", y = "Counts") +
theme_bw(base_size = 20)
ctrls_fun_df <- rbind(data.frame(ctrl_fun = counts$`Control-Fun (O)`, type = "Observed"),
data.frame(ctrl_fun = counts$`Control-Fun (E)`, type = "Expected"))
View(ctrls_fun_df)
ggplot(counts, aes(x = ctrl_fun, color = type, fill = type)) +
geom_histogram(position = "identity", alpha = 0.4, bins = 20) +
#geom_density(alpha=0.4) +
#scale_x_continuous(breaks = seq(0, 1, by = 0.2)) +
scale_color_manual(values=colors) +
scale_fill_manual(values=colors) +
#facet_grid(Data~factor(Method, levels = c("iECAT-O", "ProxECAT", "LogProx", "SKAT-O")), space = "free_x", scales = "free_x") +
labs(title = "Distribution of Function Alleles (100% vs 99% Pruned)", x = "Number of Alleles", y = "Counts") +
theme_bw(base_size = 20)
ggplot(ctrls_fun_df, aes(x = ctrl_fun, color = type, fill = type)) +
geom_histogram(position = "identity", alpha = 0.4, bins = 20) +
#geom_density(alpha=0.4) +
#scale_x_continuous(breaks = seq(0, 1, by = 0.2)) +
scale_color_manual(values=colors) +
scale_fill_manual(values=colors) +
#facet_grid(Data~factor(Method, levels = c("iECAT-O", "ProxECAT", "LogProx", "SKAT-O")), space = "free_x", scales = "free_x") +
labs(title = "Distribution of Function Alleles (100% vs 99% Pruned)", x = "Number of Alleles", y = "Counts") +
theme_bw(base_size = 20)
ggplot(ctrls_fun_df, aes(x = ctrl_fun, color = type, fill = type)) +
geom_histogram(aes(y=after_stat(density)), position = "identity", alpha = 0.4, bins = 20) +
#geom_density(alpha=0.4) +
#scale_x_continuous(breaks = seq(0, 1, by = 0.2)) +
scale_color_manual(values=colors) +
scale_fill_manual(values=colors) +
#facet_grid(Data~factor(Method, levels = c("iECAT-O", "ProxECAT", "LogProx", "SKAT-O")), space = "free_x", scales = "free_x") +
labs(title = "Distribution of Function Alleles (100% vs 99% Pruned)", x = "Number of Alleles", y = "Counts") +
theme_bw(base_size = 20)
ggplot(ctrls_fun_df, aes(x = ctrl_fun, color = type, fill = type)) +
geom_histogram(position = "identity", alpha = 0.4, bins = 20) +
#geom_density(alpha=0.4) +
#scale_x_continuous(breaks = seq(0, 1, by = 0.2)) +
scale_color_manual(values=colors) +
scale_fill_manual(values=colors) +
#facet_grid(Data~factor(Method, levels = c("iECAT-O", "ProxECAT", "LogProx", "SKAT-O")), space = "free_x", scales = "free_x") +
labs(title = "Distribution of Function Alleles (100% vs 99% Pruned)", x = "Number of Alleles", y = "Counts") +
theme_bw(base_size = 20)
ggplot(ctrls_fun_df, aes(x = ctrl_fun, color = type, fill = type)) +
geom_histogram(position = "identity", alpha = 0.4, bins = 20) +
#geom_density(alpha=0.4) +
#scale_x_continuous(breaks = seq(0, 1, by = 0.2)) +
scale_color_manual(values=colors) +
scale_fill_manual(values=colors) +
#facet_grid(Data~factor(Method, levels = c("iECAT-O", "ProxECAT", "LogProx", "SKAT-O")), space = "free_x", scales = "free_x") +
labs(title = "Distribution of Function Alleles (100% vs 99% Pruned)", x = "Number of Functional Alleles", y = "Count") +
theme_bw(base_size = 20)
ggplot(ctrls_fun_df, aes(x = ctrl_fun, color = type, fill = type)) +
geom_histogram(aes(y=after_stat(density)), position = "identity", alpha = 0.4, bins = 20) +
geom_density(alpha=0.4) +
#scale_x_continuous(breaks = seq(0, 1, by = 0.2)) +
scale_color_manual(values=colors) +
scale_fill_manual(values=colors) +
#facet_grid(Data~factor(Method, levels = c("iECAT-O", "ProxECAT", "LogProx", "SKAT-O")), space = "free_x", scales = "free_x") +
labs(title = "Distribution of Function Alleles (100% vs 99% Pruned)", x = "Number of Functional Alleles", y = "Count") +
theme_bw(base_size = 20)
colors = c("#0072B2", "#F0E442")
ggplot(ctrls_fun_df, aes(x = ctrl_fun, color = type, fill = type)) +
geom_histogram(aes(y=after_stat(density)), position = "identity", alpha = 0.4, bins = 20) +
geom_density(alpha=0.4) +
#scale_x_continuous(breaks = seq(0, 1, by = 0.2)) +
scale_color_manual(values=colors) +
scale_fill_manual(values=colors) +
#facet_grid(Data~factor(Method, levels = c("iECAT-O", "ProxECAT", "LogProx", "SKAT-O")), space = "free_x", scales = "free_x") +
labs(title = "Distribution of Function Alleles (100% vs 99% Pruned)", x = "Number of Functional Alleles", y = "Count") +
theme_bw(base_size = 20)
colors = c("#0072B2", "#009E73")
ggplot(ctrls_fun_df, aes(x = ctrl_fun, color = type, fill = type)) +
geom_histogram(aes(y=after_stat(density)), position = "identity", alpha = 0.4, bins = 20) +
geom_density(alpha=0.4) +
#scale_x_continuous(breaks = seq(0, 1, by = 0.2)) +
scale_color_manual(values=colors) +
scale_fill_manual(values=colors) +
#facet_grid(Data~factor(Method, levels = c("iECAT-O", "ProxECAT", "LogProx", "SKAT-O")), space = "free_x", scales = "free_x") +
labs(title = "Distribution of Function Alleles (100% vs 99% Pruned)", x = "Number of Functional Alleles", y = "Count") +
theme_bw(base_size = 20)
colors = c("#0072B2", "#CC79A7")
ggplot(ctrls_fun_df, aes(x = ctrl_fun, color = type, fill = type)) +
geom_histogram(aes(y=after_stat(density)), position = "identity", alpha = 0.4, bins = 20) +
geom_density(alpha=0.4) +
#scale_x_continuous(breaks = seq(0, 1, by = 0.2)) +
scale_color_manual(values=colors) +
scale_fill_manual(values=colors) +
#facet_grid(Data~factor(Method, levels = c("iECAT-O", "ProxECAT", "LogProx", "SKAT-O")), space = "free_x", scales = "free_x") +
labs(title = "Distribution of Function Alleles (100% vs 99% Pruned)", x = "Number of Functional Alleles", y = "Count") +
theme_bw(base_size = 20)
ggplot(ctrls_fun_df, aes(x = ctrl_fun, color = type, fill = type)) +
geom_histogram(aes(y=after_stat(density)), position = "identity", alpha = 0.4, bins = 20) +
geom_density(alpha=0.4) +
#scale_x_continuous(breaks = seq(0, 1, by = 0.2)) +
scale_color_manual(values=colors) +
scale_fill_manual(values=colors) +
#facet_grid(Data~factor(Method, levels = c("iECAT-O", "ProxECAT", "LogProx", "SKAT-O")), space = "free_x", scales = "free_x") +
labs(title = "Distribution of Function Alleles (100% vs 99% Pruned)", x = "Number of Functional Alleles", y = "Density") +
theme_bw(base_size = 20)
ctrls_syn_df <- rbind(data.frame(ctrl_syn = counts$`Control-Syn (O)`, type = "Observed"),
data.frame(ctrl_syn = counts$`Control-Syn (E)`, type = "Expected"))
View(ctrls_syn_df)
ggplot(ctrls_syn_df, aes(x = ctrl_syn, color = type, fill = type)) +
geom_histogram(aes(y=after_stat(density)), position = "identity", alpha = 0.4, bins = 20) +
geom_density(alpha=0.4) +
#scale_x_continuous(breaks = seq(0, 1, by = 0.2)) +
scale_color_manual(values=colors) +
scale_fill_manual(values=colors) +
#facet_grid(Data~factor(Method, levels = c("iECAT-O", "ProxECAT", "LogProx", "SKAT-O")), space = "free_x", scales = "free_x") +
labs(title = "Distribution of Synonymous Alleles (100% vs 99% Pruned)", x = "Number of Synonymous Alleles", y = "Density") +
theme_bw(base_size = 20)
median(counts$`Control-Fun (O-E)`)
mean(counts$`Control-Fun (O-E)`)
median(counts$`Control-Syn (O-E)`)
mean(counts$`Control-Syn (O-E)`)
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggpubr)
library(binom)
library(data.table)
Pop1 = "AFR"
Pop2 = "NFE"
scen = "s1"
maf = 0.001 #MAF: 0.001 (0.1%) or 0.01 (1%)
int_prune = 100
ext_prune = 99
dir = 'C:/Users/sagee/OneDrive/Documents/GitHub/masters_project/'
# Read in csv file
counts = read.table(paste0(dir, 'proxECAT_counts_expanded_', int_prune, "_v_", ext_prune, '.csv'), header = T, sep = ',')
colnames(counts) <- c('Case-Fun (O)', 'Case-Syn (O)', 'Control-Fun (O)', 'Control-Syn (O)',
'Control-Fun (E)', 'Control-Syn (E)', 'Control-Fun (O-E)',
'Control-Syn (O-E)', 'Ratio-Case', 'Ratio-Control', 'P-Value')
ctrls_fun_df <- rbind(data.frame(ctrl_fun = counts$`Control-Fun (O)`, type = "Observed"),
data.frame(ctrl_fun = counts$`Control-Fun (E)`, type = "Expected"))
ctrls_syn_df <- rbind(data.frame(ctrl_syn = counts$`Control-Syn (O)`, type = "Observed"),
data.frame(ctrl_syn = counts$`Control-Syn (E)`, type = "Expected"))
colors = c("#0072B2", "#CC79A7")
ctrls_fun_df <- rbind(data.frame(ctrl_fun = counts$`Control-Fun (O)`, Source = "Observed"),
data.frame(ctrl_fun = counts$`Control-Fun (E)`, Source = "Expected based on observed cases"))
ctrls_syn_df <- rbind(data.frame(ctrl_syn = counts$`Control-Syn (O)`, Source = "Observed"),
data.frame(ctrl_syn = counts$`Control-Syn (E)`, Source = "Expected based on observed cases"))
View(ctrls_fun_df)
View(ctrls_syn_df)
ggplot(ctrls_fun_df, aes(x = ctrl_fun, color = type)) +
geom_density() +
#scale_x_continuous(breaks = seq(0, 1, by = 0.2)) +
scale_color_manual(values=colors) +
# scale_fill_manual(values=colors) +
#facet_grid(Data~factor(Method, levels = c("iECAT-O", "ProxECAT", "LogProx", "SKAT-O")), space = "free_x", scales = "free_x") +
labs(title = "Distribution of Function Alleles (100% vs 99% Pruned)", x = "Number of Functional Alleles", y = "Density") +
theme_bw(base_size = 20)
ggplot(ctrls_fun_df, aes(x = ctrl_fun, color = Source)) +
geom_density() +
#scale_x_continuous(breaks = seq(0, 1, by = 0.2)) +
scale_color_manual(values=colors) +
# scale_fill_manual(values=colors) +
#facet_grid(Data~factor(Method, levels = c("iECAT-O", "ProxECAT", "LogProx", "SKAT-O")), space = "free_x", scales = "free_x") +
labs(title = "Distribution of Function Alleles (100% vs 99% Pruned)", x = "Number of Functional Alleles", y = "Density") +
theme_bw(base_size = 20)
ggplot(ctrls_syn_df, aes(x = ctrl_syn, color = Source)) +
geom_density() +
#scale_x_continuous(breaks = seq(0, 1, by = 0.2)) +
scale_color_manual(values=colors) +
# scale_fill_manual(values=colors) +
#facet_grid(Data~factor(Method, levels = c("iECAT-O", "ProxECAT", "LogProx", "SKAT-O")), space = "free_x", scales = "free_x") +
labs(title = "Distribution of Synonymous Alleles (100% vs 99% Pruned)", x = "Number of Synonymous Alleles", y = "Density") +
theme_bw(base_size = 20)
ggplot(ctrls_fun_df, aes(x = ctrl_fun, color = Source, fill = Source)) +
geom_density(alpha = 0.4) +
#scale_x_continuous(breaks = seq(0, 1, by = 0.2)) +
scale_color_manual(values=colors) +
scale_fill_manual(values=colors) +
#facet_grid(Data~factor(Method, levels = c("iECAT-O", "ProxECAT", "LogProx", "SKAT-O")), space = "free_x", scales = "free_x") +
labs(title = "Distribution of Function Alleles (100% vs 99% Pruned)", x = "Number of Functional Alleles", y = "Density") +
theme_bw(base_size = 20)
ggplot(ctrls_fun_df, aes(x = ctrl_fun, color = Source, fill = Source)) +
geom_density(alpha = 0.4) +
#scale_x_continuous(breaks = seq(0, 1, by = 0.2)) +
scale_color_manual(values=colors) +
scale_fill_manual(values=colors) +
#facet_grid(Data~factor(Method, levels = c("iECAT-O", "ProxECAT", "LogProx", "SKAT-O")), space = "free_x", scales = "free_x") +
labs(title = "Distribution of Functional Alleles (100% vs 99% Pruned)", x = "Number of Functional Alleles", y = "Density") +
theme_bw(base_size = 20)
ggplot(ctrls_syn_df, aes(x = ctrl_syn, color = Source, fill = Source)) +
geom_density() +
#scale_x_continuous(breaks = seq(0, 1, by = 0.2)) +
scale_color_manual(values=colors) +
scale_fill_manual(values=colors) +
#facet_grid(Data~factor(Method, levels = c("iECAT-O", "ProxECAT", "LogProx", "SKAT-O")), space = "free_x", scales = "free_x") +
labs(title = "Distribution of Synonymous Alleles (100% vs 99% Pruned)", x = "Number of Synonymous Alleles", y = "Density") +
theme_bw(base_size = 20)
ggplot(ctrls_syn_df, aes(x = ctrl_syn, color = Source, fill = Source)) +
geom_density(alpha = 0.4) +
#scale_x_continuous(breaks = seq(0, 1, by = 0.2)) +
scale_color_manual(values=colors) +
scale_fill_manual(values=colors) +
#facet_grid(Data~factor(Method, levels = c("iECAT-O", "ProxECAT", "LogProx", "SKAT-O")), space = "free_x", scales = "free_x") +
labs(title = "Distribution of Synonymous Alleles (100% vs 99% Pruned)", x = "Number of Synonymous Alleles", y = "Density") +
theme_bw(base_size = 20)
View(counts)
ctrls_df <- rbind(data.frame(ctrls = counts$`Control-Fun (O)`, Source = "Observed Functional Alleles"),
data.frame(ctrls = counts$`Control-Fun (E)`, Source = "Expected Functional Alleles based on observed cases"),
data.frame(ctrls = counts$`Control-Syn (O)`, Source = "Observed Synonymous Alleles"),
data.frame(ctrls = counts$`Control-Syn (E)`, Source = "Expected Synonymous Alleles based on observed cases"))
View(ctrls_df)
colors2 = c("#0072B2", "#CC79A7", "#BC9F4C", "#009E73")
ggplot(ctrls_df, aes(x = ctrls, color = Source, fill = Source)) +
geom_density(alpha = 0.4) +
#scale_x_continuous(breaks = seq(0, 1, by = 0.2)) +
scale_color_manual(values=colors2) +
scale_fill_manual(values=colors2) +
#facet_grid(Data~factor(Method, levels = c("iECAT-O", "ProxECAT", "LogProx", "SKAT-O")), space = "free_x", scales = "free_x") +
labs(title = "Distribution of Functional and Synonymous Alleles (100% vs 99% Pruned)", x = "Number of Alleles", y = "Density") +
theme_bw(base_size = 20)
colors2 = c("#0072B2", "#BC9F4C", "#CC79A7", "#009E73")
ggplot(ctrls_df, aes(x = ctrls, color = Source, fill = Source)) +
geom_density(alpha = 0.4) +
#scale_x_continuous(breaks = seq(0, 1, by = 0.2)) +
scale_color_manual(values=colors2) +
scale_fill_manual(values=colors2) +
#facet_grid(Data~factor(Method, levels = c("iECAT-O", "ProxECAT", "LogProx", "SKAT-O")), space = "free_x", scales = "free_x") +
labs(title = "Distribution of Functional and Synonymous Alleles (100% vs 99% Pruned)", x = "Number of Alleles", y = "Density") +
theme_bw(base_size = 20)
ext_prune = 80
# Read in csv file
counts = read.table(paste0(dir, 'proxECAT_counts_expanded_', int_prune, "_v_", ext_prune, '.csv'), header = T, sep = ',')
colnames(counts) <- c('Case-Fun (O)', 'Case-Syn (O)', 'Control-Fun (O)', 'Control-Syn (O)',
'Control-Fun (E)', 'Control-Syn (E)', 'Control-Fun (O-E)',
'Control-Syn (O-E)', 'Ratio-Case', 'Ratio-Control', 'P-Value')
ctrls_fun_df <- rbind(data.frame(ctrl_fun = counts$`Control-Fun (O)`, Source = "Observed"),
data.frame(ctrl_fun = counts$`Control-Fun (E)`, Source = "Expected based on observed cases"))
ctrls_df <- rbind(data.frame(ctrls = counts$`Control-Fun (O)`, Source = "Observed Functional Alleles"),
data.frame(ctrls = counts$`Control-Fun (E)`, Source = "Expected Functional Alleles based on observed cases"),
data.frame(ctrls = counts$`Control-Syn (O)`, Source = "Observed Synonymous Alleles"),
data.frame(ctrls = counts$`Control-Syn (E)`, Source = "Expected Synonymous Alleles based on observed cases"))
ggplot(ctrls_df, aes(x = ctrls, color = Source, fill = Source)) +
geom_density(alpha = 0.4) +
#scale_x_continuous(breaks = seq(0, 1, by = 0.2)) +
scale_color_manual(values=colors2) +
scale_fill_manual(values=colors2) +
#facet_grid(Data~factor(Method, levels = c("iECAT-O", "ProxECAT", "LogProx", "SKAT-O")), space = "free_x", scales = "free_x") +
labs(title = "Distribution of Functional and Synonymous Alleles (100% vs 80% Pruned)", x = "Number of Alleles", y = "Density") +
theme_bw(base_size = 20)
mean(counts$`Control-Fun (O-E)`)
median(counts$`Control-Fun (O-E)`)
mean(counts$`Control-Syn (O-E)`)
median(counts$`Control-Syn (O-E)`)
View(counts)
install.packages("reshape2")
## gnomAD data:
# setwd('/Users/megansorenson/Documents/Package/RAREsim_Example/Code_from_analysis/Simulation/')
setwd('C:/Users/sagee/OneDrive/Documents/GitHub/RAREsim_Example/Stratified_Target_Data/')
gnom_strat <- read.table('AFS_target_data_stratified.txt', header =  TRUE, sep  = '\t')
nvar_gnom_strat <- read.table('Nvariants_target_data_stratified.txt', header =  TRUE, sep  = '\t')
View(gnom_strat)
View(gnom_strat)
setwd('C:/Users/sagee/OneDrive/Documents/GitHub/RAREsim_Example/Code_from_analysis/Simulation/')
gnom <- read.table('AFS_data_blocks_merged.txt', header =  TRUE, sep  = '\t')
View(gnom)
#### Expected variants based on the functions we fit
##### This is the goal that RAREsim will prune to:
fit <- read.table('Expected_counts4raresim_final.txt', header = TRUE)
head(fit)
block <- levels(as.factor(as.character(fit$block)))
mac1 <-  read.table('All_original_hapgen2_AC_information.txt', header=TRUE,
sep = '\t')
mac2 <- read.table('All_oversimulated_hapgen2_AC_information.txt',
header  =  TRUE, sep= '\t')
mac3 <- read.table('All_RAREsim_AC_information_final.txt', header = TRUE,
sep = '\t')
View(mac1)
View(mac2)
### Bind them all for the graph/summary
names(mac1) <- names(mac2)
names(mac3) <- names(mac2)
mac <- rbind(mac1,mac2)
names(mac)
names(mac3)
mac <- rbind(mac, mac3)
#### add gnomAD to the plot summary
names(mac)
names(gnom)
gnom <- gnom[,c(1,10,2:8)]
gnom$rep <- '.'
gnom$data <- 'gnomAD'
### Convert AFs to ACs
# Note that the AFS is only for rare variants which is why the AFs don't sum to 1
# or the ACs don't sume to the total
gnom_strat$Singletons <- gnom_strat$MAC_1*gnom_strat$total
View(gnom_strat)
View(gnom_strat)
gnom_strat$MAC.3.5 <- gnom_strat$MAC_3.5*gnom_strat$total
setwd('C:/Users/sagee/OneDrive/Documents/GitHub/RAREsim_Example/Stratified_Target_Data/')
gnom_strat <- read.table('AFS_target_data_stratified.txt', header =  TRUE, sep  = '\t')
### Convert AFs to ACs
# Note that the AFS is only for rare variants which is why the AFs don't sum to 1
# or the ACs don't sume to the total
gnom_strat$Singletons <- gnom_strat$MAC_1*gnom_strat$total
gnom_strat$Doubletons <- gnom_strat$MAC_2*gnom_strat$total
gnom_strat$MAC.3.5 <- gnom_strat$MAC_3.5*gnom_strat$total
gnom_strat$MAC.6.10 <- gnom_strat$MAC_6.10*gnom_strat$total
gnom_strat$MAC.11.20 <- gnom_strat$MAC_11.20*gnom_strat$total
gnom_strat$MAC.21.MAF005 <- gnom_strat$MAC_21.MAF0.5*gnom_strat$total
gnom_strat$MAF005.MAF01 <- gnom_strat$MAF0.5.1*gnom_strat$total
View(gnom_strat)
sum(gnom_strat[1, 12:18])
sum(gnom_strat[1, 2:8])
153/175
head(gnom_strat[, 2:8])
head(gnom_strat[, 2:9])
head(gnom_strat[, 2:8]*gnom_strat$total)
head(gnom_strat[, 12:18])
#### add gnomAD to the plot summary
names(mac)
names(gnom)
#### add gnomAD to the plot summary
names(mac)
names(gnom_strat)
gnom_strat <- gnom_strat[, c(1, 10, 12:18, 11)]
names(gnom_strat)
#### add gnomAD to the plot summary
names(mac)
gnom_strat$rep <- '.'
gnom_strat$data <- 'gnomAD stratified'
gnom_fun <- gnom_strat[gnom_strat$fun == 'fun', ]
gnom_syn <- gnom_strat[gnom_strat$fun == 'syn', ]
View(mac)
gnom_fun$data <- 'gnomAD functional'
gnom_syn$data <- 'gnomAD synonymous'
names(gnom)
names(gnom_fun)
